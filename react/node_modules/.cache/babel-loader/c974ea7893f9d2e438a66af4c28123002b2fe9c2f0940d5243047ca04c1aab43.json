{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\project3\\\\src\\\\component\\\\DiaryList.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Button from \"./Button\";\nimport \"./DiaryList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"최신순\"\n}, {\n  value: \"oldest\",\n  name: \"오래된 순\"\n}];\nconst DiaryList = ({\n  data\n}) => {\n  _s();\n  const [sortType, setSortType] = useState(\"latest\");\n  const [sortedData, setSortedData] = useState([]);\n  const navigate = useNavigate();\n  const onChangeSortType = e => {\n    setSortType(e.target.value);\n  };\n  const onClickNew = () => {\n    navigate(\"/new\");\n  };\n  useEffect(() => {\n    const compare = (a, b) => {\n      if (sortType === \"latest\") {\n        return Number(b.date) - Number(a.date);\n      } else {\n        return Number(a.date) - Number(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(data));\n    copyList.sort(compare);\n    setSortedData(copyList);\n  }, [data, sortType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryList\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left_col\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: sortType,\n          onChange: onChangeSortType,\n          children: sortOptionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: it.value,\n            children: it.name\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right_col\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"positive\",\n          text: \"새 일기 쓰기\",\n          onClick: onClickNew\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(DiaryList, \"j7ACPDCvsvWvs35Y5AtjEg3L1dE=\", false, function () {\n  return [useNavigate];\n});\n_c = DiaryList;\nexport default DiaryList;\nvar _c;\n$RefreshReg$(_c, \"DiaryList\");","map":{"version":3,"names":["useEffect","useState","useNavigate","Button","jsxDEV","_jsxDEV","sortOptionList","value","name","DiaryList","data","_s","sortType","setSortType","sortedData","setSortedData","navigate","onChangeSortType","e","target","onClickNew","compare","a","b","Number","date","copyList","JSON","parse","stringify","sort","className","children","onChange","map","it","idx","fileName","_jsxFileName","lineNumber","columnNumber","type","text","onClick","_c","$RefreshReg$"],"sources":["D:/React/project3/src/component/DiaryList.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Button from \"./Button\";\r\nimport \"./DiaryList.css\";\r\n\r\nconst sortOptionList = [\r\n    {value: \"latest\", name: \"최신순\"},\r\n    {value: \"oldest\", name: \"오래된 순\"},\r\n];\r\n\r\nconst DiaryList = ({data})=>{\r\n    const [sortType, setSortType] = useState(\"latest\");\r\n    const [sortedData, setSortedData] = useState([]);\r\n    const navigate = useNavigate();\r\n\r\n    \r\n    const onChangeSortType = (e) =>{\r\n        setSortType(e.target.value);\r\n    };\r\n    \r\n    const onClickNew = ()=>{\r\n        navigate(\"/new\");\r\n    };\r\n\r\n    useEffect(()=>{\r\n        const compare = (a, b)=>{\r\n            if (sortType === \"latest\"){\r\n                return Number(b.date) - Number(a.date);\r\n            } \r\n            else{\r\n                return Number(a.date) - Number(b.date);\r\n            }\r\n        };\r\n        const copyList = JSON.parse(JSON.stringify(data));\r\n        copyList.sort(compare);\r\n        setSortedData(copyList);\r\n    }, [data, sortType]);\r\n\r\n\r\n    return (\r\n        <div className=\"DiaryList\">\r\n            <div className=\"menu_wrapper\">\r\n                <div className=\"left_col\">\r\n                    <select value={sortType} onChange={onChangeSortType}>\r\n                        {sortOptionList.map((it, idx)=>(\r\n                            <option key={idx} value={it.value}>\r\n                                {it.name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"right_col\">\r\n                    <Button \r\n                        type={\"positive\"} \r\n                        text={\"새 일기 쓰기\"} \r\n                        onClick={onClickNew}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default DiaryList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}