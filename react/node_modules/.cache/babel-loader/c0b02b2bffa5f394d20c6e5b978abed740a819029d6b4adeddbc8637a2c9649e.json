{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\project3\\\\src\\\\pages\\\\Diary.js\",\n  _s = $RefreshSig$();\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getFormattedDate } from \"../util\";\nimport useDiary from \"../hooks/useDiary\";\nimport Button from \"../component/Button\";\nimport Header from \"../component/Header\";\nimport Viewer from \"../component/Viewer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Diary = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const data = useDiary(id);\n  const navigate = useNavigate();\n  const goBack = () => {\n    navigate(-1);\n  };\n  const goEdit = () => {\n    navigate(`/edit/${id}`);\n  };\n\n  //초기에는 useDiary로 값을 가져올 때 빈값을 가져오기 때문에 data에 아무것도 없을 수 있음\n  //이 상태에서 data에 접근하면 에러가 발행하므로 if를 이용.\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uC77C\\uAE30\\uB97C \\uBD88\\uB7EC\\uC624\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 14\n    }, this);\n  } else {\n    const {\n      date,\n      emotionId,\n      content\n    } = data;\n    const title = `${getFormattedDate(new Date(Number(date)))} 기록`;\n    console.log(\"날짜\" + date);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: title,\n        leftChild: /*#__PURE__*/_jsxDEV(Button, {\n          text: \"< 뒤로 가기\",\n          onClick: goBack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 24\n        }, this),\n        rightChild: /*#__PURE__*/_jsxDEV(Button, {\n          text: \"수정하기\",\n          onClick: goEdit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Viewer, {\n        content: content,\n        emotionId: emotionId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this);\n  }\n};\n_s(Diary, \"mC7E8zKclsMWfWn8Mg5hdv9y0Q8=\", false, function () {\n  return [useParams, useDiary, useNavigate];\n});\n_c = Diary;\nexport default Diary;\nvar _c;\n$RefreshReg$(_c, \"Diary\");","map":{"version":3,"names":["useNavigate","useParams","getFormattedDate","useDiary","Button","Header","Viewer","jsxDEV","_jsxDEV","Diary","_s","id","data","navigate","goBack","goEdit","children","fileName","_jsxFileName","lineNumber","columnNumber","date","emotionId","content","title","Date","Number","console","log","leftChild","text","onClick","rightChild","_c","$RefreshReg$"],"sources":["D:/React/project3/src/pages/Diary.js"],"sourcesContent":["import { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport { getFormattedDate } from \"../util\";\r\nimport useDiary from \"../hooks/useDiary\";\r\nimport Button from \"../component/Button\";\r\nimport Header from \"../component/Header\";\r\nimport Viewer from \"../component/Viewer\";\r\n\r\nconst Diary = () => {\r\n    const { id } = useParams();\r\n    const data = useDiary(id);\r\n  \r\n    const navigate = useNavigate();\r\n    const goBack = () => {\r\n      navigate(-1);\r\n    };\r\n  \r\n    const goEdit = () => {\r\n      navigate(`/edit/${id}`);\r\n    };\r\n    \r\n    //초기에는 useDiary로 값을 가져올 때 빈값을 가져오기 때문에 data에 아무것도 없을 수 있음\r\n    //이 상태에서 data에 접근하면 에러가 발행하므로 if를 이용.\r\n    if (!data) {\r\n      return <div>일기를 불러오고 있습니다...</div>;\r\n    } else {\r\n      const { date, emotionId, content } = data;\r\n      const title = `${getFormattedDate(new Date(Number(date)))} 기록`;\r\n      console.log(\"날짜\" + date);\r\n      return (\r\n        <div>\r\n          <Header\r\n            title={title}\r\n            leftChild={<Button text={\"< 뒤로 가기\"} onClick={goBack} />}\r\n            rightChild={<Button text={\"수정하기\"} onClick={goEdit} />}\r\n          />\r\n          <Viewer content={content} emotionId={emotionId} />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default Diary;"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAEzD,SAASC,gBAAgB,QAAQ,SAAS;AAC1C,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM;IAAEC;EAAG,CAAC,GAAGV,SAAS,CAAC,CAAC;EAC1B,MAAMW,IAAI,GAAGT,QAAQ,CAACQ,EAAE,CAAC;EAEzB,MAAME,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAMc,MAAM,GAAGA,CAAA,KAAM;IACnBD,QAAQ,CAAC,CAAC,CAAC,CAAC;EACd,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBF,QAAQ,CAAE,SAAQF,EAAG,EAAC,CAAC;EACzB,CAAC;;EAED;EACA;EACA,IAAI,CAACC,IAAI,EAAE;IACT,oBAAOJ,OAAA;MAAAQ,QAAA,EAAK;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACpC,CAAC,MAAM;IACL,MAAM;MAAEC,IAAI;MAAEC,SAAS;MAAEC;IAAQ,CAAC,GAAGX,IAAI;IACzC,MAAMY,KAAK,GAAI,GAAEtB,gBAAgB,CAAC,IAAIuB,IAAI,CAACC,MAAM,CAACL,IAAI,CAAC,CAAC,CAAE,KAAI;IAC9DM,OAAO,CAACC,GAAG,CAAC,IAAI,GAAGP,IAAI,CAAC;IACxB,oBACEb,OAAA;MAAAQ,QAAA,gBACER,OAAA,CAACH,MAAM;QACLmB,KAAK,EAAEA,KAAM;QACbK,SAAS,eAAErB,OAAA,CAACJ,MAAM;UAAC0B,IAAI,EAAE,SAAU;UAACC,OAAO,EAAEjB;QAAO;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAE;QACxDY,UAAU,eAAExB,OAAA,CAACJ,MAAM;UAAC0B,IAAI,EAAE,MAAO;UAACC,OAAO,EAAEhB;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC,eACFZ,OAAA,CAACF,MAAM;QAACiB,OAAO,EAAEA,OAAQ;QAACD,SAAS,EAAEA;MAAU;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC;EAEV;AACF,CAAC;AAACV,EAAA,CAhCED,KAAK;EAAA,QACQR,SAAS,EACXE,QAAQ,EAEJH,WAAW;AAAA;AAAAiC,EAAA,GAJ1BxB,KAAK;AAkCX,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}